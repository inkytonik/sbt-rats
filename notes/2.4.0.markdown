This release of the sbt-rats plugin contains the following changes, new features and fixes which all relate to the syntax specification support:

### Changes

* The old functionality of the `ratsUseDefaultLayout` setting has been split into a new setting `ratsUseDefaultSpacing` that controls whether the default `Spacing` definition should be emitted, and a new interpretation of `ratsUseDefaultLayout` that now just controls whether the default `Space` and `EOL` definitions should be emitted.

* The definition of `EOF` is now always emitted on the grounds that there are no other useful definitions for it and it is useful in every syntax specification.

### New Features

* The documentation claimed that the negative lookahead operator (`!`) worked in both String rules and in AST rules, but the operator wasn't actually accepted in AST rules. It is now accepted and works in both places.

* A new `&` construct has been added to provide access to the Rats! positive lookahead operator. Use it as `&P` which means succeed if and only if `P` succeeds at the current position, but consume no input and build no semantic value. This operator works in both String and AST rules.

* Formatting directives are now allowed in parenthesized tree rule elements, so constructs such as the following are now possible: `(\n foo) ** ','`.

### Fixes

* Fixed a bug that caused bad pretty-printing code to be generated for a recursive non-terminal unless parenthesized pretty-printing was enabled.

* Fixed a bug that caused the generated parser not to compile when the verbose option was used.

* Fix bugs in generated code if the syntax spec only contains String-valued non-terminals.

* Protect against Rats! errors that don't have a corresponding location. In some circumstances, including when a `String`-valued production has an unreachable alternative, Rats! will generate an error at a null location. `sbt-rats` previously would crash trying to access this location. We now generate an error saying that the location is unknown.

* Some non-terminals in the grammar for syntax specifications have been renamed so as to yield better error messages.

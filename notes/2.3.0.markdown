This release of the sbt-rats plugin contains the following changes:

### Changes

* Zero is now the highest precedence level, not one.

* The `ratsUseScalaLists` option has been replaced by `ratsScalaRepetitionType` which allows the collection type used for repetitive constructs to be specified. Can be set to `Some (ListType)` or `Some (VectorType)` to choose `List` or `Vector`, respectively. The default is `None` which means don't use Scala collections.

### New

* If a `+` operator is used in a syntax definition and case classes are being generated, the field for the repeated element will be a vector. In this version, the generated case class also gets a `require` call that ensures no instance can be created with an empty vector, thereby enforcing the "one or more" constraint of the `+` operator.

* Generated pretty-printer traits now include a `show` method that returns the format object as a string, in addition to `format` which returns a formatted document.

* It is now possible to have non-left-recursive alternatives that aren't at the highest precedence level of the recursive non-terminal's alternatives.

* If Kiama 2.x is being used, the new Kiama support for parenthesisation of n-ary infix operator expressions is used.

* Added `relativeFilenames` option in syntax files which causes error messages to omit the current path from filenames.

* An error is now produced if a recursive non-terminal's alternatives omits precedence levels.

* An error is now produced if a single precedence level of a recursive non-terminal contains operators with different associativities.

* Other minor improvements to error messages for precedence levels of recursive non-terminals.

### Bug fixes

* [Issue 1](https://bitbucket.org/inkytonik/sbt-rats/issue/1/output-directories-are-not-always-created) The plugin now correctly creates nested output directories. Thanks to Caoyuan Deng for reporting.

* Properly set source locations of list constructs built by user-level repeated constructs or constructs built by repetitions that arise from left recursion removal.

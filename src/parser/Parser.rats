/*
 * This file is part of the sbt-rats plugin.
 * Copyright (c) 2012-2014 Anthony M Sloane, Macquarie University.
 * All rights reserved.
 * Distributed under the New BSD license.
 * See file LICENSE at top of distribution.
 */

module parser.Parser;

header {
    import ast.*;
    import ast.SList.*;
    import org.kiama.output.LeftAssoc$;
    import org.kiama.output.NonAssoc$;
    import org.kiama.output.RightAssoc$;
    import org.kiama.util.Positions;
    import scala.collection.immutable.List;
    import scala.collection.immutable.Nil$;
    import scala.collection.immutable.$colon$colon;
    import xtc.util.Action;
}

body {
    static {
        add (KEYWORDS, new String[] {
            "body", "defaultIndent", "defaultWidth", "header", "left", "line",
            "module", "nest", "nested", "none", "nospacing", "option", "paren",
            "rats", "relativeFilenames", "right", "setOfString", "sp", "String",
            "Token", "verbose", "Void"
        });
    }

    /** Set position of an Object using Kiama's Positions module */
    void setLocation(final Object object, final int start) {
        if (null != object) {
            Column s = column (start);
            Positions.setStart (object, new LineColPosition (this, start, s.line, s.column));
            int finish = yyCount == 0 ? 0 : yyCount - 1;
            Column f = column (finish);
            Positions.setFinish (object, new LineColPosition (this, finish, f.line, f.column));
        }
    }

    /** Apply a Scala list of actions */
    <T> T apply (List<Action<T>> actions, T seed) {
        while (! actions.isEmpty()) {
            seed    = actions.head().run(seed);
            actions = actions.drop(1);
        }
        return seed;
    }

}

option setOfString (KEYWORDS), withLocation;

public Grammar Grammar =
    Spacing m:ModuleDecl h:HeaderSection? b:BodySection? o:Options? rs:Rule* EOF {
        yyValue = new Grammar (m, h, b, o, rs);
    };

// Module declarations

Pair<String> ModuleDecl =
    void:"module":Word QualIdentifier void:";":Symbol;

// Header section

String HeaderSection =
    void:"header":Word CodeBlock;

// Body section

String BodySection =
    void:"body":Word CodeBlock;

// Code blocks

String CodeBlock =
    '{' yyValue:CodeBlockText '}' Spacing;

String CodeBlockText =
    ('{' CodeBlockText '}' / !'}' _)*;

// Options

Pair<SyntaxOption> Options =
    void:"option":Word h:Option tl:(void:",":Symbol Option)* void:";":Symbol {
        yyValue = SList.create (h, tl);
    };

SyntaxOption Option =
    void:"defaultIndent":Word void:"(":Symbol d:DecDigits void:")":Symbol {
        yyValue = new Indentation (Integer.parseInt (d));
    } /
    void:"defaultWidth":Word void:"(":Symbol d:DecDigits void:")":Symbol {
        yyValue = new Width (Integer.parseInt (d));
    } /
    void:"relativeFilenames":Word {
        yyValue = new RelativeFilenames ();
    } /
    void:"setOfString":Word void:"(":Symbol n:Word void:")":Symbol {
        yyValue = new SetOfString (n);
    } /
    void:"verbose":Word {
        yyValue = new Verbose ();
    };

// Rules

Rule Rule =
      GrammarRule void:".":Symbol
    / RatsSection;

// Grammar rules

Rule GrammarRule =
    i:IdnDef void:":":Symbol t:StringRuleType void:"=":Symbol alts:StringAlternatives {
        yyValue = new StringRule (i, t, alts);
    } /
    i:IdnDef t:Type? anns:RuleAnnotations? void:"=":Symbol alts:TreeAlternatives {
        yyValue = new ASTRule (i, t, alts, false, anns);
    };

// Types

IdnUse StringRuleType =
    StringType /
    TokenType /
    VoidType;

IdnUse StringType =
    void:"String":Word {
        yyValue = new IdnUse ("String");
    };

IdnUse TokenType =
    void:"Token":Word {
        yyValue = new IdnUse ("Token");
    };

IdnUse VoidType =
    void:"Void":Word {
        yyValue = new IdnUse ("Void");
    };

IdnUse Type =
    void:":":Symbol IdnUse;

// Alternatives

Pair<Element> StringAlternatives =
    h:StringElement tl:(void:"|":Symbol StringElement)* {
        yyValue = SList.create (h, tl);
    };

Pair<Alternative> TreeAlternatives =
    h:TreeAlternative tl:(void:"|":Symbol TreeAlternative)* {
        yyValue = SList.create (h, tl);
    };

Alternative TreeAlternative =
    es:TreeElement* as:AltAnnotations? {
        yyValue = new Alternative (es, as, new DefaultAction ());
    };

// String Elements

Element StringElement =
    seed:StringElement1 actions:StringElementAltTail+ {
        yyValue = apply (actions, seed);
    } /
    StringElement1;

constant Action<Element> StringElementAltTail =
    void:"/":Symbol right:StringElement {
        yyValue = new Action<Element> () {
            public Element run (Element left) {
                return new Alt (left, right);
            }
        };
    };

Element StringElement1 =
    seed:StringElement2 actions:StringElementSeqnTail+ {
        yyValue = apply (actions, seed);
    } /
    StringElement2;

constant Action<Element> StringElementSeqnTail =
    right:StringElement2 {
        yyValue = new Action<Element> () {
            public Element run (Element left) {
                return new Seqn (left, right);
            }
        };
    };

Element StringElement2 =
    e1:Primary void:"**":Symbol e2:Primary {
        yyValue = new Rep (true, e1, e2);
    } /
    e1:Primary void:"++":Symbol e2:Primary {
        yyValue = new Rep (false, e1, e2);
    } /
    e:Primary void:"*":Symbol {
        yyValue = new Rep (true, e, new Epsilon ());
    } /
    e:Primary void:"+":Symbol {
        yyValue = new Rep (false, e, new Epsilon ());
    } /
    e:Primary void:"?":Symbol {
        yyValue = new Opt (e);
    } /
    Primary;

Element Primary =
    void:"(":Symbol StringElement void:")":Symbol /
    void:"!":Symbol p:Primary {
        yyValue = new Not (p);
    } /
    void:"&":Symbol p:Primary {
        yyValue = new And (p);
    } /
    Literal Spacing /
    i:IdnUse {
        yyValue = new NonTerminal (new NTName (i));
    };

// Abstract Syntax Tree elements

Element TreeElement =
    Formatting /
    TreeFactor;

Element TreeFactor =
    e1:TreePrimary void:"**":Symbol e2:TreePrimary {
        yyValue = new Rep (true, e1, e2);
    } /
    e1:TreePrimary void:"++":Symbol e2:TreePrimary {
        yyValue = new Rep (false, e1, e2);
    } /
    e:TreePrimary void:"*":Symbol {
        yyValue = new Rep (true, e, new Epsilon ());
    } /
    e:TreePrimary void:"+":Symbol {
        yyValue = new Rep (false, e, new Epsilon ());
    } /
    e:TreePrimary void:"?":Symbol {
        yyValue = new Opt (e);
    } /
    TreePrimary;

Element TreePrimary =
    void:"(":Symbol TreeAtMostOneNonterm void:")":Symbol /
    void:"!":Symbol p:TreePrimary {
        yyValue = new Not (p);
    } /
    void:"&":Symbol p:TreePrimary {
        yyValue = new And (p);
    } /
    TreeLiteral /
    TreeNonterm;

Element TreeNonterm =
    i:Identifier void:"[":Symbol d:DecDigits void:"]":Symbol {
        yyValue = new Block (i, Integer.parseInt (d));
    } /
    i:IdnUse {
        yyValue = new NonTerminal (new NTName (i));
    };

Element TreeAtMostOneNonterm =
    i:TreeNonterm ls:TreeNoNonterms {
        yyValue = new Seqn (i, ls);
    } /
    l:TreeLiteral es:TreeAtMostOneNonterm {
        yyValue = new Seqn (l, es);
    } /
    f:Formatting es:TreeAtMostOneNonterm {
        yyValue = new Seqn (f, es);
    } /
    TreeLiteral /
    TreeNonterm;

Element TreeNoNonterms =
    seed:TreeNoNonterm actions:TreeNoNontermsTail+ {
        yyValue = apply (actions, seed);
    } /
    TreeNoNonterm;

constant Action<Element> TreeNoNontermsTail =
    right:TreeNoNonterm {
        yyValue = new Action<Element> () {
            public Element run (Element left) {
                return new Seqn (left, right);
            }
        };
    };

Element TreeNoNonterm =
    TreeLiteral /
    Formatting;

Element TreeLiteral =
    Literal Spacing;

// Formatting

Element Formatting =
    void:"\\n":Symbol {
        yyValue = new Newline ();
      }
    / void:"nest":Word void:"(":Symbol e:TreeFactor void:")":Symbol {
        yyValue = new Nest (e, false);
    }
    / void:"nestnl":Word void:"(":Symbol e:TreeFactor void:")":Symbol {
        yyValue = new Nest (e, true);
    }
    / void:"sp":Word {
        yyValue = new Space ();
    };

// Rule annotations

Pair<RuleAnnotation> RuleAnnotations =
    void:"{":Symbol RuleAnnotationList void:"}":Symbol;

Pair<RuleAnnotation> RuleAnnotationList =
    h:RuleAnnotation tl:(void:",":Symbol RuleAnnotation)* {
        yyValue = SList.create (h, tl);
    };

RuleAnnotation RuleAnnotation =
    void:"line":Word {
        yyValue = new Line ();
    } /
    void:"nested":Word {
        yyValue = new Nested ();
    } /
    void:"paren":Word {
        yyValue = new Parenthesized ();
    } /
    void:"nospacing":Word {
        yyValue = new NoSpacing ();
    };

// Alternative annotations

Pair<AltAnnotation> AltAnnotations =
    void:"{":Symbol AltAnnotationList void:"}":Symbol;

Pair<AltAnnotation> AltAnnotationList =
    h:AltAnnotation tl:(void:",":Symbol AltAnnotation)* {
        yyValue = SList.create (h, tl);
    };

AltAnnotation AltAnnotation =
    void:"left":Word {
        yyValue = new Associativity (LeftAssoc$.MODULE$);
    } /
    void:"none":Word {
        yyValue = new Associativity (NonAssoc$.MODULE$);
    } /
    void:"right":Word {
        yyValue = new Associativity (RightAssoc$.MODULE$);
    } /
    i:IdnDef {
        yyValue = new Constructor (i);
    } /
    n:Number void:":":Symbol m:QualIdentifier void:":":Symbol t:QualIdentifier {
        yyValue = new Transformation (Integer.parseInt (n), m, t);
    } /
    n:Number {
        yyValue = new Precedence (Integer.parseInt (n));
    };

String Number =
    DecDigits Spacing;

// Rats! sections

Rule RatsSection =
      RatsRule void:".":Symbol
    / RatsBlock;

// Rats! rule

RatsRule RatsRule =
    i:IdnDef void:":":Symbol StringType void:"=":Symbol void:"rats":Word s:CodeBlock {
        yyValue = new RatsRule (i, new IdnUse ("String"), s);
    } /
    i:IdnDef t:Type void:"=":Symbol void:"rats":Word s:CodeBlock {
        yyValue = new RatsRule (i, t, s);
    } /
    i:IdnDef void:"=":Symbol void:"rats":Word s:CodeBlock {
        yyValue = new RatsRule (i, null, s);
    };

// Rats! block

RatsBlock RatsBlock =
    void:"rats":Word s:CodeBlock {
        yyValue = new RatsBlock (s);
    };

// Identifiers

IdnUse IdnUse =
    i:Identifier {
        yyValue = new IdnUse (i);
    };

IdnDef IdnDef =
    i:Identifier {
        yyValue = new IdnDef (i);
    };

Pair<String> QualIdentifier =
    h:Identifier tl:(void:".":Symbol Identifier)* {
        yyValue = SList.create (h, tl);
    };

String Identifier =
    yyValue:Word &{
        ! contains (KEYWORDS, yyValue)
    };

// Literals

Element Literal =
    '_' {
        yyValue = new Wildcard ();
    } /
    ["] s:StringLiteral ["] {
        yyValue = new StringLit (s);
    } /
    ['] s:CharLiteral ['] {
        yyValue = new CharLit (s);
    } /
    '[' s:CharClassContents ']' {
        yyValue = new CharClass (s);
    };

String StringLiteral =
    (Escape / !["] _)*;

String CharLiteral =
    (Escape / !['] _)*;

String CharClassContents =
    CharClassElement*;

String CharClassElement =
    CharClassCharacter '-' CharClassCharacter /
    CharClassCharacter;

String CharClassCharacter =
    Escape /
    ![\-\]\\] _;

String Escape =
    '\\' [btnfr"'\[\\\]\-] /
    '\\' 'u' HexQuad /
    OctalEscape;

String HexQuad =
    HexDigit HexDigit HexDigit HexDigit;

String HexDigit =
    [0-9a-fA-F];

String OctalEscape =
    '\\' ([0-3] OctDigit OctDigit / OctDigit OctDigit / OctDigit);

String OctDigit =
    [0-7];

String DecDigits =
    [0-9]+;

String DecDigit =
    [0-9];

// Words

String Word =
    WordCharacters Spacing;

transient String WordCharacters =
    h:_ &{
        Character.isJavaIdentifierStart (h)
    } (t:_ &{
        Character.isJavaIdentifierPart (t)
    })*;

// Syntax symbols

String Symbol =
    SymbolCharacters Spacing;

transient String SymbolCharacters =
    "**" / "++" /
    ":" / "=" / "/" / "|" / "{" / "}" / "(" / ")" / "!" / "&" / "." / "," /
    "*" / "+" / "?" / "[" / "]" / ";" / "\\n";

transient void Spacing   = (Space / SLComment / MLComment)*;
transient void FSpacing  = (Space / SLComment / MLComment)+;
transient void Space     = ' ' / '\t' / '\f' / EOL;
transient void SLComment = "//" (![\n\r] _)* EOL;
transient void MLComment = "/*" (MLComment / !"*/" _)* "*/";
transient void EOL       = '\r' '\n' / '\r' / '\n';
transient void EOF       = !_;
